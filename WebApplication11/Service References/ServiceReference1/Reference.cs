//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication11.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ServiceReference1.Service1")]
    public interface Service1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/DoWork", ReplyAction="urn:Service1/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/DoWork", ReplyAction="urn:Service1/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/saludo", ReplyAction="urn:Service1/saludoResponse")]
        string saludo();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/saludo", ReplyAction="urn:Service1/saludoResponse")]
        System.Threading.Tasks.Task<string> saludoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/listarUsuarios", ReplyAction="urn:Service1/listarUsuariosResponse")]
        string listarUsuarios();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/listarUsuarios", ReplyAction="urn:Service1/listarUsuariosResponse")]
        System.Threading.Tasks.Task<string> listarUsuariosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/buscarUsuario", ReplyAction="urn:Service1/buscarUsuarioResponse")]
        string buscarUsuario(string usuario_param);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/buscarUsuario", ReplyAction="urn:Service1/buscarUsuarioResponse")]
        System.Threading.Tasks.Task<string> buscarUsuarioAsync(string usuario_param);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/existeLogin", ReplyAction="urn:Service1/existeLoginResponse")]
        string existeLogin(string usuario, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/existeLogin", ReplyAction="urn:Service1/existeLoginResponse")]
        System.Threading.Tasks.Task<string> existeLoginAsync(string usuario, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/actualizarUsuario", ReplyAction="urn:Service1/actualizarUsuarioResponse")]
        string actualizarUsuario(string nombre, string apellido, string edad, string estados_civil, string telefono, string ciudad, int id_usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/actualizarUsuario", ReplyAction="urn:Service1/actualizarUsuarioResponse")]
        System.Threading.Tasks.Task<string> actualizarUsuarioAsync(string nombre, string apellido, string edad, string estados_civil, string telefono, string ciudad, int id_usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/nuevoUsuario", ReplyAction="urn:Service1/nuevoUsuarioResponse")]
        string nuevoUsuario(string nombre, string apellido, int edad, int estados_civil, string telefono, string ciudad);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/nuevoUsuario", ReplyAction="urn:Service1/nuevoUsuarioResponse")]
        System.Threading.Tasks.Task<string> nuevoUsuarioAsync(string nombre, string apellido, int edad, int estados_civil, string telefono, string ciudad);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/borrarUsuario", ReplyAction="urn:Service1/borrarUsuarioResponse")]
        string borrarUsuario(int estatus, int id_usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/borrarUsuario", ReplyAction="urn:Service1/borrarUsuarioResponse")]
        System.Threading.Tasks.Task<string> borrarUsuarioAsync(int estatus, int id_usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/enviarCorreo", ReplyAction="urn:Service1/enviarCorreoResponse")]
        int enviarCorreo(string[] datosEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/enviarCorreo", ReplyAction="urn:Service1/enviarCorreoResponse")]
        System.Threading.Tasks.Task<int> enviarCorreoAsync(string[] datosEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/listarPeliculas", ReplyAction="urn:Service1/listarPeliculasResponse")]
        string listarPeliculas();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:Service1/listarPeliculas", ReplyAction="urn:Service1/listarPeliculasResponse")]
        System.Threading.Tasks.Task<string> listarPeliculasAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface Service1Channel : WebApplication11.ServiceReference1.Service1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WebApplication11.ServiceReference1.Service1>, WebApplication11.ServiceReference1.Service1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string saludo() {
            return base.Channel.saludo();
        }
        
        public System.Threading.Tasks.Task<string> saludoAsync() {
            return base.Channel.saludoAsync();
        }
        
        public string listarUsuarios() {
            return base.Channel.listarUsuarios();
        }
        
        public System.Threading.Tasks.Task<string> listarUsuariosAsync() {
            return base.Channel.listarUsuariosAsync();
        }
        
        public string buscarUsuario(string usuario_param) {
            return base.Channel.buscarUsuario(usuario_param);
        }
        
        public System.Threading.Tasks.Task<string> buscarUsuarioAsync(string usuario_param) {
            return base.Channel.buscarUsuarioAsync(usuario_param);
        }
        
        public string existeLogin(string usuario, string pass) {
            return base.Channel.existeLogin(usuario, pass);
        }
        
        public System.Threading.Tasks.Task<string> existeLoginAsync(string usuario, string pass) {
            return base.Channel.existeLoginAsync(usuario, pass);
        }
        
        public string actualizarUsuario(string nombre, string apellido, string edad, string estados_civil, string telefono, string ciudad, int id_usuario) {
            return base.Channel.actualizarUsuario(nombre, apellido, edad, estados_civil, telefono, ciudad, id_usuario);
        }
        
        public System.Threading.Tasks.Task<string> actualizarUsuarioAsync(string nombre, string apellido, string edad, string estados_civil, string telefono, string ciudad, int id_usuario) {
            return base.Channel.actualizarUsuarioAsync(nombre, apellido, edad, estados_civil, telefono, ciudad, id_usuario);
        }
        
        public string nuevoUsuario(string nombre, string apellido, int edad, int estados_civil, string telefono, string ciudad) {
            return base.Channel.nuevoUsuario(nombre, apellido, edad, estados_civil, telefono, ciudad);
        }
        
        public System.Threading.Tasks.Task<string> nuevoUsuarioAsync(string nombre, string apellido, int edad, int estados_civil, string telefono, string ciudad) {
            return base.Channel.nuevoUsuarioAsync(nombre, apellido, edad, estados_civil, telefono, ciudad);
        }
        
        public string borrarUsuario(int estatus, int id_usuario) {
            return base.Channel.borrarUsuario(estatus, id_usuario);
        }
        
        public System.Threading.Tasks.Task<string> borrarUsuarioAsync(int estatus, int id_usuario) {
            return base.Channel.borrarUsuarioAsync(estatus, id_usuario);
        }
        
        public int enviarCorreo(string[] datosEmail) {
            return base.Channel.enviarCorreo(datosEmail);
        }
        
        public System.Threading.Tasks.Task<int> enviarCorreoAsync(string[] datosEmail) {
            return base.Channel.enviarCorreoAsync(datosEmail);
        }
        
        public string listarPeliculas() {
            return base.Channel.listarPeliculas();
        }
        
        public System.Threading.Tasks.Task<string> listarPeliculasAsync() {
            return base.Channel.listarPeliculasAsync();
        }
    }
}
